import disnake
from disnake.ext import commands

class FurryHelpConsole(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_message(self, message: disnake.Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞."""
        if message.author.bot:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤

        if self.bot.user.mentioned_in(message):
            await message.channel.send(f"–ü—Ä–∏–≤–µ—Ç, {message.author.mention}! –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. üêæ")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: furryhelpconsole
    @commands.slash_command(name="furryhelpconsole", description="–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å —Ñ—É—Ä—Ä–∏-—Ç–µ–º–æ–π.")
    async def furry_help_console(self, interaction: disnake.ApplicationCommandInteraction):
        help_text = (
            "`/ls` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.\n"
            "`/pwd` - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥.\n"
            "`/top` - –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n"
            "`/df` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö –∏ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.\n"
            "`/cat` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.\n"
            "`/reload` - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞.\n"
            "`/shutdown` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.\n"
            "`/status` - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.\n"
            "`/log` - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞.\n"
            "`/clearconsole` - –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç.\n"
            "`/neofetch` - –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –≤ —Å—Ç–∏–ª–µ Neofetch.\n"
            "`/htop` - –í—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ —Å—Ç–∏–ª–µ htop.\n"
            "`/lsblk` - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∞—Ö (–¥–∏—Å–∫–∞—Ö).\n"
            "`/uptime` - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.\n"
            "`/whoami` - –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
            "`/free` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏.\n"
            "`/dmesg` - –°–æ–æ–±—â–µ–Ω–∏—è —è–¥—Ä–∞.\n"
            "`/ping` - –ü–∏–Ω–≥ —Ö–æ—Å—Ç–∞.\n"
            "`/history` - –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥.\n"
            "`/man` - –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.\n"
            "`/uname` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ.\n"
            "`/ps` - –ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.\n"
            "`/id` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."
        )
        embed = disnake.Embed(
            title="Furry Help Console",
            description=help_text,
            color=disnake.Color.gold()
        )
        await interaction.response.send_message(embed=embed)

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: neofetch
    @commands.slash_command(name="neofetch", description="–í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ –≤ —Å—Ç–∏–ª–µ Neofetch.")
    async def neofetch(self, interaction: disnake.ApplicationCommandInteraction):
        system_info = """
        Host: Mojang Global Infrastructure
        Location: Stockholm, Sweden
        OS: Ubuntu 20.04.6 LTS x86_64
        Kernel: Linux 5.4.0-137-generic
        CPU: Intel Xeon Platinum 8272CL (26 cores)
        GPU: Software Renderer
        Memory: 128GB ECC DDR4
        Disk: 10TB NVMe SSD RAID-10
        Uptime: 12 days, 4 hours
        Load Average: 2.34, 2.12, 2.08
        Network: 10Gbps
        IP: 192.168.1.1
        Services: Docker, Java 17 Runtime
        """
        await interaction.response.send_message(f"```\n{system_info}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: ls
    @commands.slash_command(name="ls", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞.")
    async def ls(self, interaction: disnake.ApplicationCommandInteraction):
        files = ["bot.py", "config.json", "Dockerfile", "logs/", "requirements.txt", "README.md"]
        output = "\n".join(files)
        await interaction.response.send_message(f"```\n{output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: pwd
    @commands.slash_command(name="pwd", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥.")
    async def pwd(self, interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.send_message("```\n~/furry_bot/\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: top
    @commands.slash_command(name="top", description="–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    async def top(self, interaction: disnake.ApplicationCommandInteraction):
        processes = [
            "bot.py - 12.5% CPU - 1024MB RAM",
            "discord.py - 5.3% CPU - 512MB RAM",
            "python3 - 3.7% CPU - 256MB RAM"
        ]
        output = "\n".join(processes)
        await interaction.response.send_message(f"```\n{output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: df
    @commands.slash_command(name="df", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö –∏ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.")
    async def df(self, interaction: disnake.ApplicationCommandInteraction):
        disk_usage = [
            "Filesystem      Size  Used  Avail  Use%  Mounted on",
            "/dev/md0       100T   20T   80T    20%  /data",
            "/dev/sda1       1T    400G  600G   40%  /"
        ]
        output = "\n".join(disk_usage)
        await interaction.response.send_message(f"```\n{output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: cat
    @commands.slash_command(name="cat", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.")
    async def cat(self, interaction: disnake.ApplicationCommandInteraction, file: str):
        if file == "bot.log":
            log_content = "Bot started\nUser commands processed\nError: None\n"
        else:
            log_content = "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await interaction.response.send_message(f"```\n{log_content}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: reload
    @commands.slash_command(name="reload", description="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞.")
    async def reload(self, interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.send_message("```\n–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –±–æ—Ç–∞... –ü–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ... üêæ\n```")
        await interaction.followup.send("```\n–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω! üêæ –ú—è—É!\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: shutdown
    @commands.slash_command(name="shutdown", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.")
    async def shutdown(self, interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.send_message("```\n–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞... –ü–æ–∫–∞, –ª–∞–ø–∫–∞! üêæ\n```")
        await interaction.followup.send("```\n–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω... –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üêæ\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: status
    @commands.slash_command(name="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.")
    async def status(self, interaction: disnake.ApplicationCommandInteraction):
        status = "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ üêæ. –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç."
        await interaction.response.send_message(f"```\n{status}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: log
    @commands.slash_command(name="log", description="–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞.")
    async def log(self, interaction: disnake.ApplicationCommandInteraction):
        log_content = "–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ. –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await interaction.response.send_message(f"```\n{log_content}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: clearconsole
    @commands.slash_command(name="clearconsole", description="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç.")
    async def clearconsole(self, interaction: disnake.ApplicationCommandInteraction, amount: int = 10):
        if amount > 0:
            await interaction.channel.purge(limit=amount)
            await interaction.response.send_message(f"```\n–ß–∞—Ç –æ—á–∏—â–µ–Ω –Ω–∞ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π! üßπüêæ\n```")
        else:
            await interaction.response.send_message("```\n–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: htop
    @commands.slash_command(name="htop", description="–í—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ —Å—Ç–∏–ª–µ htop.")
    async def htop(self, interaction: disnake.ApplicationCommandInteraction):
        htop_output = """
        top - 12:34:56 up 2:30,  1 user,  load average: 0.12, 0.08, 0.05
        Tasks: 105 total,   1 running,  104 sleeping,   0 stopped,   0 zombie
        %Cpu(s):  5.1 us,  2.4 sy,  0.0 ni, 91.8 id,  0.7 wa,  0.0 hi,  0.0 si,  0.0 st
        MiB Mem :  15999.2 total,   4563.7 free,   7121.5 used,   4314.0 buff/cache
        MiB Swap:   4096.0 total,   4096.0 free,      0.0 used.   7813.4 avail Mem 

        PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
        12345 bot      20   0  100000  12000   3500 S   12.3  0.8   1:12.34 bot.py
        23456 root     20   0  500000  20000   5000 S    3.2  1.3   0:12.56 python3
        34567 user     20   0  200000  15000   4000 S    2.4  0.9   0:02.34 discord.py
        """
        await interaction.response.send_message(f"```\n{htop_output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: lsblk
    @commands.slash_command(name="lsblk", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∞—Ö (–¥–∏—Å–∫–∞—Ö).")
    async def lsblk(self, interaction: disnake.ApplicationCommandInteraction):
        lsblk_output = """
        NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
        sda      8:0    0  100G  0 disk 
        ‚îú‚îÄsda1   8:1    0   40G  0 part /
        ‚îî‚îÄsda2   8:2    0   60G  0 part /data
        sdb      8:16   0  500G  0 disk 
        ‚îî‚îÄsdb1   8:17   0  500G  0 part /backup
        """
        await interaction.response.send_message(f"```\n{lsblk_output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: uptime
    @commands.slash_command(name="uptime", description="–í—ã–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.")
    async def uptime(self, interaction: disnake.ApplicationCommandInteraction):
        uptime_output = """
        2:30 up 3 days,  1 user,  load average: 0.10, 0.07, 0.03
        """
        await interaction.response.send_message(f"```\n{uptime_output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: whoami
    @commands.slash_command(name="whoami", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    async def whoami(self, interaction: disnake.ApplicationCommandInteraction):
        await interaction.response.send_message("```\nuser\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: free
    @commands.slash_command(name="free", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏.")
    async def free(self, interaction: disnake.ApplicationCommandInteraction):
        free_output = """
        Mem:   10485760 MB total,  5242880 MB free,  2621440 MB used,  2621440 MB cache
        Swap:  4194304 MB total,  2097152 MB free,  2097152 MB used
        """
        await interaction.response.send_message(f"```\n{free_output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: dmesg
    @commands.slash_command(name="dmesg", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —è–¥—Ä–∞.")
    async def dmesg(self, interaction: disnake.ApplicationCommandInteraction):
        dmesg_output = """
        [  123.456] Kernel log start...
        [  125.789] Disk check successful
        [  130.001] Boot process completed successfully
        """
        await interaction.response.send_message(f"```\n{dmesg_output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: ping
    @commands.slash_command(name="ping", description="–ü–∏–Ω–≥–æ–≤–∞—Ç—å —Ö–æ—Å—Ç.")
    async def ping(self, interaction: disnake.ApplicationCommandInteraction, host: str):
        ping_result = f"–ü–∏–Ω–≥ –∫ {host}: 32ms"
        await interaction.response.send_message(f"```\n{ping_result}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: history
    @commands.slash_command(name="history", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥.")
    async def history(self, interaction: disnake.ApplicationCommandInteraction):
        history_output = """
        1. /ls
        2. /uptime
        3. /top
        4. /free
        """
        await interaction.response.send_message(f"```\n{history_output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: man
    @commands.slash_command(name="man", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.")
    async def man(self, interaction: disnake.ApplicationCommandInteraction, command: str):
        man_page = f"–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {command}:\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        await interaction.response.send_message(f"```\n{man_page}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: uname
    @commands.slash_command(name="uname", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ.")
    async def uname(self, interaction: disnake.ApplicationCommandInteraction):
        uname_output = "Linux FurryAI 5.15.0 #42 SMP Thu Jan 15 14:00:00 UTC 2025 x86_64 GNU/Linux"
        await interaction.response.send_message(f"```\n{uname_output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: ps
    @commands.slash_command(name="ps", description="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.")
    async def ps(self, interaction: disnake.ApplicationCommandInteraction):
        processes = [
            "bot.py - 12.5% CPU - 1024MB RAM",
            "discord.py - 5.3% CPU - 512MB RAM",
            "python3 - 3.7% CPU - 256MB RAM"
        ]
        output = "\n".join(processes)
        await interaction.response.send_message(f"```\n{output}\n```")

    # –°–ª—ç—à-–∫–æ–º–∞–Ω–¥–∞: id
    @commands.slash_command(name="id", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")
    async def id(self, interaction: disnake.ApplicationCommandInteraction):
        user_info = f"User ID: {interaction.user.id}\nUsername: {interaction.user.name}"
        await interaction.response.send_message(f"```\n{user_info}\n```")

def setup(bot):
    bot.add_cog(FurryHelpConsole(bot))
